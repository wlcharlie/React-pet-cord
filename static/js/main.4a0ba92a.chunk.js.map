{"version":3,"sources":["router/PrivateRoute.js","components/layouts/Loading.js","router/Index.js","App.js","store/index.js","reportWebVitals.js","serviceWorker.js","index.js","store/auth.js","api/auth.js"],"names":["PrivateRoute","Component","component","path","isLoggedIn","useSelector","state","auth","render","to","Loading","thickness","speed","emptyColor","color","size","Login","lazy","Home","Pets","Records","Index","fallback","exact","App","theme","store","configureStore","reducer","authSlice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","findAccountAPI","localStorage","getItem","data","res","ok","userRes","dispatch","authActions","login","token","user","logout","ReactDOM","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","createSlice","name","initialState","email","id","reducers","payload","_id","setItem","removeItem","actions","db","registerAPI","a","password","username","fetch","method","body","JSON","stringify","returnSecureToken","headers","json","UID","localId","loginAPI","idToken","users"],"mappings":"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","file":"static/js/main.4a0ba92a.chunk.js","sourcesContent":["import { Redirect, Route } from 'react-router-dom';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst PrivateRoute = ({ component: Component, path }) => {\r\n  const isLoggedIn = useSelector(state => state.auth.isLoggedIn);\r\n\r\n  return (\r\n    <Route\r\n      path={path}\r\n      render={() => (isLoggedIn ? <Component /> : <Redirect to=\"/login\" />)}\r\n    />\r\n  );\r\n};\r\n\r\nexport default PrivateRoute;\r\n","import { Spinner } from '@chakra-ui/react';\r\n\r\nconst Loading = () => {\r\n  return (\r\n    <Spinner\r\n      thickness=\"4px\"\r\n      speed=\"0.65s\"\r\n      emptyColor=\"gray.200\"\r\n      color=\"blue.500\"\r\n      size=\"xl\"\r\n    />\r\n  );\r\n};\r\n\r\nexport default Loading;\r\n","import { Fragment, lazy, Suspense } from 'react';\r\n\r\nimport { Redirect, Route } from 'react-router-dom';\r\nimport PrivateRoute from './PrivateRoute';\r\nimport Loading from '../components/layouts/Loading';\r\n\r\nconst Login = lazy(() => import('../pages/Login'));\r\nconst Home = lazy(() => import('../pages/home'));\r\nconst Pets = lazy(() => import('../pages/Pets'));\r\nconst Records = lazy(() => import('../pages/Records'));\r\n\r\nconst Index = () => {\r\n  return (\r\n    <Fragment>\r\n      <Suspense fallback={<Loading />}>\r\n        <Route path=\"/\" exact>\r\n          <Redirect to=\"/login\" />\r\n        </Route>\r\n        <Route path=\"/login\" component={Login} />\r\n        <PrivateRoute path=\"/home\" component={Home} />\r\n        <PrivateRoute path=\"/pets\" component={Pets} />\r\n        <PrivateRoute path=\"/records\" component={Records} />\r\n      </Suspense>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Index;\r\n","import React from 'react';\nimport { ChakraProvider, theme } from '@chakra-ui/react';\n\nimport Index from './router/Index';\n\nfunction App() {\n  return (\n    <ChakraProvider theme={theme}>\n      <Index />\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\r\n\r\nimport authSlice from './auth';\r\n\r\nconst store = configureStore({\r\n  reducer: { auth: authSlice.reducer },\r\n});\r\n\r\nexport default store;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\nimport store from './store/index.js';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\nimport './index.css';\nimport { findAccountAPI } from './api/auth';\nimport { authActions } from './store/auth';\n\nfindAccountAPI(localStorage.getItem('token')).then(data => {\n  if (!data || !data.res.ok || !data.userRes.ok) {\n    store.dispatch(authActions.logout());\n  } else {\n    store.dispatch(\n      authActions.login({ token: localStorage.getItem('token'), ...data.user })\n    );\n  }\n\n  ReactDOM.render(\n    <StrictMode>\n      <Provider store={store}>\n        <BrowserRouter basename=\"/React-pet-cord\">\n          <App />\n        </BrowserRouter>\n      </Provider>\n    </StrictMode>,\n    document.getElementById('root')\n  );\n});\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst authSlice = createSlice({\r\n  name: 'auth',\r\n  initialState: {\r\n    token: null,\r\n    isLoggedIn: false,\r\n    name: '',\r\n    email: '',\r\n    id: '',\r\n  },\r\n  reducers: {\r\n    login: (state, { payload }) => {\r\n      const { token, name, email, _id } = payload;\r\n      state.token = token;\r\n      state.isLoggedIn = true;\r\n      state.name = name;\r\n      state.email = email;\r\n      state.id = _id;\r\n      localStorage.setItem('token', token);\r\n    },\r\n    logout: state => {\r\n      state.token = null;\r\n      state.isLoggedIn = false;\r\n      localStorage.removeItem('token');\r\n    },\r\n  },\r\n});\r\n\r\nexport const authActions = authSlice.actions;\r\nexport default authSlice;\r\n","const db = 'https://pet-cord.herokuapp.com/api';\r\n\r\nexport const registerAPI = async ({ email, password, username }) => {\r\n  try {\r\n    const res = await fetch(\r\n      'https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=' +\r\n        process.env.REACT_APP_G_API,\r\n      {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          email,\r\n          password,\r\n          returnSecureToken: true,\r\n        }),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      }\r\n    );\r\n    const data = await res.json();\r\n    const userRes = await fetch(db + '/users', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        name: username,\r\n        email,\r\n        UID: data.localId,\r\n      }),\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    });\r\n    const user = await userRes.json();\r\n    return { res, data, user };\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const loginAPI = async ({ email, password }) => {\r\n  try {\r\n    const res = await fetch(\r\n      'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=' +\r\n        process.env.REACT_APP_G_API,\r\n      {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          email,\r\n          password,\r\n          returnSecureToken: true,\r\n        }),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      }\r\n    );\r\n    const data = await res.json();\r\n    const userRes = await fetch(db + '/users/' + data.localId, {\r\n      method: 'GET',\r\n    });\r\n    const user = await userRes.json();\r\n    return { res, data, user };\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const findAccountAPI = async token => {\r\n  try {\r\n    const res = await fetch(\r\n      'https://identitytoolkit.googleapis.com/v1/accounts:lookup?key=' +\r\n        process.env.REACT_APP_G_API,\r\n      {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n          idToken: token,\r\n        }),\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n      }\r\n    );\r\n    const data = await res.json();\r\n    const userRes = await fetch(db + '/users/' + data.users[0].localId, {\r\n      method: 'GET',\r\n    });\r\n    const user = await userRes.json();\r\n    return { res, data, userRes, user };\r\n  } catch {\r\n    return false;\r\n  }\r\n};\r\n"],"sourceRoot":""}